%{
use strict;
use warnings;

use Data::Dumper ();

use Awesome::Lexer;
use Awesome::Node::Nodes;
use Awesome::Node::NumberNode;
use Awesome::Node::StringNode;
use Awesome::Node::TrueNode;
use Awesome::Node::FalseNode;
use Awesome::Node::NilNode;
use Awesome::Node::CallNode;
use Awesome::Node::DefNode;
use Awesome::Node::SetLocalNode;
use Awesome::Node::SetConstantNode;
use Awesome::Node::ClassNode;
use Awesome::Node::IfNode;

%}

# Declare tokens produced by the lexer
%token IF ELSE
%token DEF
%token CLASS
%token NEWLINE
%token NUMBER
%token STRING
%token TRUE FALSE NIL
%token IDENTIFIER
%token CONSTANT
%token INDENT DEDENT

# "," is lowest precedence, "." is highest.
%left  ','
%right '='
%left  '||'
%left  '&&'
%left  '==' '!='
%left  '>' '>=' '<' '<='
%left  '+' '-'
%left  '*' '/'
%right '!'
%left  '.'

%%

# All parsing will end in this rule, being the trunk of the AST
Root:
    /* nothing */                     { Awesome::Node::Nodes->new() }
  | Expressions                       { $_[1] }
  ;

# Any list of expressions, class or method body, separated by line breaks
Expressions:
    Expression                        { Awesome::Node::Nodes->new($_[1]) }
  | Expressions Terminator Expression { $_[1]->push_node($_[3]) }
  # To ignore trailing line breaks
  | Expressions Terminator            { $_[1] }
  | Terminator                        { Awesome::Node::Nodes->new() }
  ;

# All types of expressions in our language
Expression:
    Literal
  | Call
  | Operator
  | Constant
  | Assign
  | Def
  | Class
  | If
  | '(' Expression ')'                { $_[2] }
  ;

# All tokens that can terminate an expression
Terminator:
    NEWLINE
  | ';'
  ;

# All hard-coded values
Literal:
    NUMBER                            { Awesome::Node::NumberNode->new($_[1]) }
  | STRING                            { Awesome::Node::StringNode->new($_[1]) }
  | TRUE                              { Awesome::Node::TrueNode->new }
  | FALSE                             { Awesome::Node::FalseNode->new }
  | NIL                               { Awesome::Node::NilNode->new }
  ;

# A method call
Call:
    # method
    IDENTIFIER                        { Awesome::Node::CallNode->new(undef, $_[1], []) }
    # method(arguments)
  | IDENTIFIER '(' ArgList ')'        { Awesome::Node::CallNode->new(undef, $_[1], $_[3]) }
    # receiver method
  | Expression '.' IDENTIFIER         { Awesome::Node::CallNode->new($_[1], $_[3], []) }
    # receiver method(arguments)
  | Expression
      '.' IDENTIFIER '(' ArgList ')'  { Awesome::Node::CallNode->new($_[1], $_[3], []) }
  ;

ArgList:
    /* nothing */                     { [] }
  | Expression                        { [ $_[1] ] }
  | ArgList ',' Expression            { [ @{$_[1]}, $_[3] ] }
  ;

Operator:
# Binary operators
    '!' Expression                    { Awesome::Node::CallNode->new($_[2], $_[1], []) }
  | Expression '||' Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '&&' Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '==' Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '!=' Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '>'  Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '>=' Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '<'  Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '<=' Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '+'  Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '-'  Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '*'  Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  | Expression '/'  Expression        { Awesome::Node::CallNode->new($_[1], $_[2], [$_[3]]) }
  ;

Constant:
    CONSTANT                          { Awesome::Node::GetConstantNode->new($_[1]) }
  ;

# Assignment to a variable or constant
Assign:
    IDENTIFIER '=' Expression         { Awesome::Node::SetLocalNode->new($_[1], $_[3]) }
  | CONSTANT '=' Expression           { Awesome::Node::SetConstantNode->new($_[1], $_[3])}
  ;

# Method definition
Def:
    DEF IDENTIFIER Block              { Awesome::Node::DefNode->new($_[2], [], $_[3]) }
  | DEF IDENTIFIER
        '(' ParamList ')' Block       { Awesome::Node::DefNode->new($_[2], $_[4], $_[6]) }
  ;

ParamList:
    /* nothing */                     { [] }
  | IDENTIFIER                        { [ $_[1] ] }
  | ParamList ',' IDENTIFIER          { [ @{$_[1]}, $_[3] ] }
  ;

# Class definition
Class:
    CLASS CONSTANT Block              { Awesome::Node::ClassNode->new($_[2], $_[3]) }
  ;

# if block
If:
    IF Expression Block               { Awesome::Node::IfNode->new($_[2], $_[3]) }
  ;

# A block of indented code. You see here that all the hard work was done by the lexer
Block:
    INDENT Expressions DEDENT         { $_[2] }
  # If you don't like indentation you could replace the previous rule with the
  # following one to separate blocks w/ curly brackets. You'll also need to remove the
  # indentation magic section in the lexer
  # '{' Expressions '}'               { $_[2] }
  ;

%%

sub yyerror {}

sub yylex {
    my ($self) = @_;

    unless (@{$self->YYData->{INPUT}}) {
        # Reach the end of input
        return ('', undef);
    }

    my $token = shift @{$self->YYData->{INPUT}};
    return @{$token};
}

sub parse {
    my ($self, $code, $show_debug) = @_;
    $show_debug = defined $show_debug ? $show_debug : 0;
    my @tokens = Awesome::Lexer->new->tokenize($code);

    warn Data::Dumper->Dump(\@tokens) if $show_debug;

    $self->YYData->{INPUT} = \@tokens;

    return $self->YYParse( yylex => \&yylex, yyerror => \&yyerror );
}
